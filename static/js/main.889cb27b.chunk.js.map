{"version":3,"sources":["LifecycleMethod.js","CheckBox.js","arrow.js","index.js"],"names":["LifecycleMethod","state","displayInfo","clickHandler","e","setState","this","props","title","children","deprecated","displayDeprecated","uncommon","displayUncommon","className","onClick","icon","faCaretDown","faCaretRight","display","childrenDisplay","React","Component","CheckBox","checked","initialChecked","handleClick","event","target","effect","type","id","onChange","Arrow","faArrowDown","App","handleDeprecated","bool","handleUncommon","htmlFor","GetDerivedStateFromProps","alternativeComponent","unsafePreamble","RenderMethod","ReactDOM","render","document","querySelector"],"mappings":"gRA+DeA,G,kNAzDbC,MAAQ,CACNC,aAAa,G,EAGfC,aAAe,SAACC,GACd,EAAKC,UAAS,WACZ,MAAO,CACLH,aAAc,EAAKD,MAAMC,iB,4CAK/B,WAAS,MASHI,KAAKC,MANPC,EAHK,EAGLA,MACAC,EAJK,EAILA,SAJK,IAKLC,kBALK,SAMLC,EANK,EAMLA,kBANK,IAOLC,gBAPK,SAQLC,EARK,EAQLA,gBAEIX,EAAgBI,KAAKL,MAArBC,YAGN,GAAIQ,IAAeC,EACjB,OAAO,KAIT,GAAIC,IAAaC,EACf,OAAO,KAUT,OACE,yBAAKC,UAAU,UACb,wBACEA,UAAS,oBAAeJ,GAAc,cACtCK,QAAST,KAAKH,cAEd,yBAAKW,UAAU,QACb,kBAAC,IAAD,CAAiBE,KAAMd,EAAce,IAAcC,OAEpD,IAAMV,GAfS,SAACW,EAASV,GAC9B,GAAIU,EACF,OAAO,yBAAKL,UAAU,sBAAsBL,GAe3CW,CAAgBlB,EAAaO,Q,GArDRY,IAAMC,YCwBrBC,E,4MA1BbtB,MAAQ,CAAEuB,QAAS,EAAKjB,MAAMkB,gB,EAM9BC,YAAc,SAACC,GACb,EAAKtB,SAAS,CAAEmB,QAASG,EAAMC,OAAOJ,UAAW,WAC/C,EAAKjB,MAAMsB,OAAO,EAAK5B,MAAMuB,a,uDANjC,WACElB,KAAKC,MAAMsB,W,oBASb,WACE,OACE,oCACE,2BACEC,KAAK,WACLC,GAAIzB,KAAKC,MAAMwB,GACfP,QAASlB,KAAKC,MAAMiB,QACpBQ,SAAU1B,KAAKoB,mB,GApBFL,IAAMC,WCadW,MARf,WACE,OACE,yBAAKnB,UAAU,SACb,kBAAC,IAAD,CAAiBE,KAAMkB,QCEvBC,E,4MACJlC,MAAQ,CACNU,mBAAmB,EACnBE,iBAAiB,G,EAQnBuB,iBAAmB,SAACC,GAClB,EAAKhC,SAAS,CAAEM,kBAAmB0B,K,EAGrCC,eAAiB,SAACD,GAChB,EAAKhC,SAAS,CAAEQ,gBAAiBwB,K,uDAVnC,WACE/B,KAAK8B,iBAAiB9B,KAAKL,MAAMU,mBACjCL,KAAKgC,eAAehC,KAAKL,MAAMY,mB,oBAWjC,WAAU,IAAD,EACsCP,KAAKL,MAA5CU,EADC,EACDA,kBAAmBE,EADlB,EACkBA,gBAEzB,OACE,6BACE,uDAEA,6BACE,2BAAO0B,QAAQ,sBAAf,+BAGA,kBAAC,EAAD,CACEf,QAASlB,KAAKL,MAAMU,kBACpBoB,GAAG,qBACHF,OAAQvB,KAAK8B,oBAIjB,6BACE,2BAAOG,QAAQ,oBAAf,gCACA,kBAAC,EAAD,CACEf,QAASlB,KAAKL,MAAMY,gBACpBkB,GAAG,mBACHF,OAAQvB,KAAKgC,kBAKjB,yBAAKxB,UAAU,SACb,yBAAKA,UAAU,aACb,wCACA,iHAKA,kBAAC,EAAD,CACEH,kBAAmBA,EACnBE,gBAAiBA,EACjBL,MAAM,wBAEN,mHAMA,kJAMF,kBAAC,EAAD,MAEA,kBAAC,EAAD,CACEG,kBAAmBA,EACnBE,gBAAiBA,EACjBL,MAAM,eAEN,oDACA,gLAKA,4BACE,4BACE,sDADF,+CAIA,4BACE,iEADF,2CAKF,oCACA,4BACE,mIAIA,oDACuB,4CADvB,qCAKF,uCACA,6BACE,sKAMJ,kBAAC,EAAD,MAEA,kBAACgC,EAAD,CACE7B,kBAAmBA,EACnBE,gBAAiBA,EACjB4B,qBAAqB,sBAGvB,kBAAC,EAAD,MAEA,kBAAC,EAAD,CACE9B,kBAAmBA,EACnBE,gBAAiBA,EACjBL,MAAM,qBACNE,YAAY,GAEZ,6DACA,2BAAIgC,GACJ,yGAEe,qDAFf,4HAQF,kBAAC,EAAD,MAEA,kBAAC,EAAD,CACE/B,kBAAmBA,EACnBE,gBAAiBA,IAGnB,kBAAC,EAAD,MAEA,yBAAKC,UAAU,8BAAf,UAEA,kBAAC,EAAD,MAEA,kBAAC,EAAD,CACEH,kBAAmBA,EACnBE,gBAAiBA,EACjBL,MAAM,qBAEN,qDACA,+IAIA,4BACE,8KAWR,yBAAKM,UAAU,SACb,yBAAKA,UAAU,aACb,wCACA,yKAGmB,+CAHnB,UAKA,kBAAC,EAAD,CACED,gBAAiBA,EACjBF,kBAAmBA,EACnBH,MAAM,4BACNE,YAAY,GAEZ,6EACA,2BAAIgC,GAEJ,sDAC0B,4DAAwC,IADlE,kCAMF,kBAAC,EAAD,MAEA,kBAACF,EAAD,CACE7B,kBAAmBA,EACnBE,gBAAiBA,EACjB4B,qBAAqB,uBAGvB,kBAAC,EAAD,MAEA,kBAAC,EAAD,CACE9B,kBAAmBA,EACnBE,gBAAiBA,EACjBL,MAAM,wBACNI,UAAU,GAEV,4EACA,iJAIA,2BACE,2CADF,gBACuC,uCADvC,wCAE8B,sCAF9B,mDAKA,4BACE,sDACA,kJAOJ,kBAAC,EAAD,MAEA,kBAAC,EAAD,CACEC,gBAAiBA,EACjBF,kBAAmBA,EACnBH,MAAM,sBACNE,YAAY,GAEZ,iFACA,2BAAIgC,GACJ,4BACE,kFACA,+DACmC,IACjC,sDAFF,cAOJ,kBAAC,EAAD,MAEA,kBAAC,EAAD,CACE/B,kBAAmBA,EACnBE,gBAAiBA,IAGnB,kBAAC,EAAD,MAEA,kBAAC,EAAD,CACEF,kBAAmBA,EACnBE,gBAAiBA,EACjBD,UAAU,EACVJ,MAAM,2BAEN,+EACA,0IAIA,2BACE,2CADF,8DAEqB,oDAFrB,YAMF,kBAAC,EAAD,MAEA,yBAAKM,UAAU,8BAAf,UAEA,kBAAC,EAAD,MAEA,kBAAC,EAAD,CACEH,kBAAmBA,EACnBE,gBAAiBA,EACjBL,MAAM,sBAEN,oFACA,6HAIA,4BACE,qEACyC,IACvC,yDAFF,qCAKA,sIAIA,4CACe,4CADf,6FAYR,yBAAKM,UAAU,SACb,yBAAKA,UAAU,aACb,0CACA,6GAIA,kBAAC,EAAD,CACED,gBAAiBA,EACjBF,kBAAmBA,EACnBH,MAAM,wBAEN,wDACA,0JAUN,yBAAKM,UAAU,SACb,yBAAKA,UAAU,aACb,8CACA,yBAAKA,UAAU,qBACb,kBAAC,EAAD,CACED,gBAAiBA,EACjBF,kBAAmBA,EACnBC,UAAU,EACVJ,MAAM,qBAEN,gEACA,gHAEwB,uCAFxB,yCAGiB,sCAHjB,iEAMA,4BACE,uGAIA,yJAQN,yBAAKM,UAAU,qBACb,kBAAC,EAAD,CACED,gBAAiBA,EACjBF,kBAAmBA,EACnBC,UAAU,EACVJ,MAAM,4BAEN,wEACA,oJAIA,2BACE,2CADF,qDAEc,sD,GA/XZa,IAAMC,WA4YxB,SAASkB,EAAT,GAII,IAHFC,EAGC,EAHDA,qBACA9B,EAEC,EAFDA,kBACAE,EACC,EADDA,gBAEA,OACE,kBAAC,EAAD,CACEF,kBAAmBA,EACnBE,gBAAiBA,EACjBL,MAAM,2BACNI,UAAU,GAEV,uFACA,4JAIA,2BACE,2CADF,yEAIA,4BACE,gDACmB,sCADnB,2BAGA,qHAIA,iFACqD,IAClD6B,EAFH,uBASR,IAAME,EAAe,SAAC,GAA4C,IAA1ChC,EAAyC,EAAzCA,kBAAmBE,EAAsB,EAAtBA,gBACzC,OACE,kBAAC,EAAD,CACEF,kBAAmBA,EACnBE,gBAAiBA,EACjBL,MAAM,UAEN,0CACA,2IAE0C,uCAF1C,OAEiE,IAC/D,uCAHF,wCAKA,2BACE,2CADF,2DAEc,sCAFd,KAIA,4BACE,sHAEkB,oCAFlB,eAIA,6DACgC,wCADhC,kCAEa,sCAFb,6CASFkC,EAAc,iIAGpBE,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,cAAc,Y","file":"static/js/main.889cb27b.chunk.js","sourcesContent":["import React from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faCaretRight, faCaretDown } from \"@fortawesome/free-solid-svg-icons\";\nimport \"./index.css\";\n\nclass LifecycleMethod extends React.Component {\n  state = {\n    displayInfo: false,\n  };\n\n  clickHandler = (e) => {\n    this.setState(() => {\n      return {\n        displayInfo: !this.state.displayInfo,\n      };\n    });\n  };\n\n  render() {\n    // props and state we are using\n    let {\n      title,\n      children,\n      deprecated = false,\n      displayDeprecated,\n      uncommon = false,\n      displayUncommon,\n    } = this.props;\n    let { displayInfo } = this.state;\n\n    // don't do anything else if displayDeprecated is false\n    if (deprecated && !displayDeprecated) {\n      return null;\n    }\n\n    // don't do anything else if displayUncommon is false\n    if (uncommon && !displayUncommon) {\n      return null;\n    }\n\n    //works out whether or not it should display the component information\n    let childrenDisplay = (display, children) => {\n      if (display) {\n        return <div className=\"method-description\">{children}</div>;\n      }\n    };\n\n    return (\n      <div className=\"method\">\n        <h3\n          className={`title-box ${deprecated && \"deprecated\"}`}\n          onClick={this.clickHandler}\n        >\n          <div className=\"icon\">\n            <FontAwesomeIcon icon={displayInfo ? faCaretDown : faCaretRight} />\n          </div>\n          {\" \" + title}\n        </h3>\n        {childrenDisplay(displayInfo, children)}\n      </div>\n    );\n  }\n}\nexport default LifecycleMethod;\n","import React from \"react\";\n\nclass CheckBox extends React.Component {\n  state = { checked: this.props.initialChecked };\n\n  componentDidMount() {\n    this.props.effect();\n  }\n\n  handleClick = (event) => {\n    this.setState({ checked: event.target.checked }, () => {\n      this.props.effect(this.state.checked);\n    });\n  };\n\n  render() {\n    return (\n      <>\n        <input\n          type=\"checkbox\"\n          id={this.props.id}\n          checked={this.props.checked}\n          onChange={this.handleClick}\n        />\n      </>\n    );\n  }\n}\n\nexport default CheckBox;\n","import React from \"react\";\nimport \"./index.css\";\n\n// Font Awesome Arrows\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faArrowDown } from \"@fortawesome/free-solid-svg-icons\";\n\nfunction Arrow() {\n  return (\n    <div className=\"arrow\">\n      <FontAwesomeIcon icon={faArrowDown} />\n    </div>\n  );\n}\n\nexport default Arrow;\n","import ReactDOM from \"react-dom\";\nimport React from \"react\";\n\n// Components\nimport LifecycleMethod from \"./LifecycleMethod.js\";\nimport CheckBox from \"./CheckBox.js\";\n\n// CSS styling\nimport \"./index.css\";\n\nimport Arrow from \"./arrow.js\";\n\nclass App extends React.Component {\n  state = {\n    displayDeprecated: false,\n    displayUncommon: true,\n  };\n\n  componentDidMount() {\n    this.handleDeprecated(this.state.displayDeprecated);\n    this.handleUncommon(this.state.displayUncommon);\n  }\n\n  handleDeprecated = (bool) => {\n    this.setState({ displayDeprecated: bool });\n  };\n\n  handleUncommon = (bool) => {\n    this.setState({ displayUncommon: bool });\n  };\n\n  render() {\n    let { displayDeprecated, displayUncommon } = this.state;\n\n    return (\n      <div>\n        <h1>React Lifecycle Methods</h1>\n\n        <div>\n          <label htmlFor=\"include-deprecated\">\n            Include Deprecated Methods:\n          </label>\n          <CheckBox\n            checked={this.state.displayDeprecated}\n            id=\"include-deprecated\"\n            effect={this.handleDeprecated}\n          />\n        </div>\n\n        <div>\n          <label htmlFor=\"include-uncommon\">Include Less Common Methods?</label>\n          <CheckBox\n            checked={this.state.displayUncommon}\n            id=\"include-uncommon\"\n            effect={this.handleUncommon}\n          />\n        </div>\n\n        {/* MOUNTING */}\n        <div className=\"cycle\">\n          <div className=\"cycle-box\">\n            <h2>Mounting</h2>\n            <p>\n              The mounting lifecycle happens once, when the component mounts for\n              the first time.\n            </p>\n\n            <LifecycleMethod\n              displayDeprecated={displayDeprecated}\n              displayUncommon={displayUncommon}\n              title=\"Property Initializer\"\n            >\n              <code>\n                {`state = {\n                name: Garry,\n                age: 28\n              }`}\n              </code>\n              <p>\n                This is not a method, but here you can initialize your state as\n                a property without needing to call the constructor\n              </p>\n            </LifecycleMethod>\n\n            <Arrow />\n\n            <LifecycleMethod\n              displayDeprecated={displayDeprecated}\n              displayUncommon={displayUncommon}\n              title=\"constructor\"\n            >\n              <code>constructor(props)</code>\n              <p>\n                This is the first method to be called when the component is\n                created. It is generally used for two purposes, both of which\n                are no longer required:\n              </p>\n              <ul>\n                <li>\n                  <strong>Initializing state</strong> (You can use property\n                  initializer instead)\n                </li>\n                <li>\n                  <strong>Binding event handler methods</strong> (You can use\n                  arrow functions instead)\n                </li>\n              </ul>\n              <p>Also:</p>\n              <ul>\n                <li>\n                  If you use the property initializer, state will already by set\n                  by the time the constructor executes\n                </li>\n                <li>\n                  Make sure you assign <code>this.state</code> directly, don't\n                  call setstate()\n                </li>\n              </ul>\n              <h4>Syntax:</h4>\n              <pre>\n                <code>\n                  {`constructor(props) {\\n\\tsuper(props);\\n\\tthis.state = { name: Dave, age: 28 }\\n\\tthis.handleClick = this.handleClick.bind(this)\\n}`}\n                </code>\n              </pre>\n            </LifecycleMethod>\n\n            <Arrow />\n\n            <GetDerivedStateFromProps\n              displayDeprecated={displayDeprecated}\n              displayUncommon={displayUncommon}\n              alternativeComponent=\"componentDidMount\"\n            />\n\n            <Arrow />\n\n            <LifecycleMethod\n              displayDeprecated={displayDeprecated}\n              displayUncommon={displayUncommon}\n              title=\"componentWillMount\"\n              deprecated={true}\n            >\n              <code>UNSAFE_componentWillMount()</code>\n              <p>{unsafePreamble}</p>\n              <p>\n                If you need to fetch data or do anything 'before' render, you\n                can do it in <code>componentDidMount()</code> instead (this will\n                cause an extra render, but in these cases you may want to\n                display a 'loading' bar initially anyway)\n              </p>\n            </LifecycleMethod>\n\n            <Arrow />\n\n            <RenderMethod\n              displayDeprecated={displayDeprecated}\n              displayUncommon={displayUncommon}\n            />\n\n            <Arrow />\n\n            <div className=\"method centered commit-box\">COMMIT</div>\n\n            <Arrow />\n\n            <LifecycleMethod\n              displayDeprecated={displayDeprecated}\n              displayUncommon={displayUncommon}\n              title=\"componentDidMount\"\n            >\n              <code>componentDidMount()</code>\n              <p>\n                This method is called only once, after the first render. It's a\n                good place to fetch data, or operate on the DOM.\n              </p>\n              <ul>\n                <li>\n                  You can call setState immeditely, if you require a DOM node to\n                  exist, otherwise set the state in the constructor (or property\n                  initialiser)\n                </li>\n              </ul>\n            </LifecycleMethod>\n          </div>\n        </div>\n\n        {/* UPDATING */}\n        <div className=\"cycle\">\n          <div className=\"cycle-box\">\n            <h2>Updating</h2>\n            <p>\n              This lifecycle happens every time an update happens to a\n              component. This is usually caused by a change in props, a change\n              in state or by a <code>forceUpdate()</code> call.\n            </p>\n            <LifecycleMethod\n              displayUncommon={displayUncommon}\n              displayDeprecated={displayDeprecated}\n              title=\"componentWillReceiveProps\"\n              deprecated={true}\n            >\n              <code>UNSAFE_ComponentWillReceiveProps(nextProps)</code>\n              <p>{unsafePreamble}</p>\n\n              <p>\n                This the old version of <code>getDerivedStateFromProps()</code>{\" \"}\n                and does much the same thing.\n              </p>\n            </LifecycleMethod>\n\n            <Arrow />\n\n            <GetDerivedStateFromProps\n              displayDeprecated={displayDeprecated}\n              displayUncommon={displayUncommon}\n              alternativeComponent=\"componentDidUpdate\"\n            />\n\n            <Arrow />\n\n            <LifecycleMethod\n              displayDeprecated={displayDeprecated}\n              displayUncommon={displayUncommon}\n              title=\"shouldComponentUpdate\"\n              uncommon={true}\n            >\n              <code>shouldComponentUpdate(nextProps,nextState)</code>\n              <p>\n                This method is used to prevent rendering - if you know the\n                output is not affected by whatever triggered the update\n              </p>\n              <p>\n                <strong>Return:</strong> a boolean - <code>false</code> to stop\n                the update from continuing, <code>true</code> to run as normal.\n                True is returned by default.\n              </p>\n              <ul>\n                <li>For optimisation only.</li>\n                <li>\n                  Consider using a Pure Component instead, which will\n                  automatically not update if props and state have not changed\n                </li>\n              </ul>\n            </LifecycleMethod>\n\n            <Arrow />\n\n            <LifecycleMethod\n              displayUncommon={displayUncommon}\n              displayDeprecated={displayDeprecated}\n              title=\"componentWillUpdate\"\n              deprecated={true}\n            >\n              <code>UNSAFE_ComponentWilUpdate(nextProps, nextState)</code>\n              <p>{unsafePreamble}</p>\n              <ul>\n                <li>This is the old version of getSnapshotBeforeUpdate</li>\n                <li>\n                  Any side effects can be moved to{\" \"}\n                  <code>componentDidUpdate()</code> instead\n                </li>\n              </ul>\n            </LifecycleMethod>\n\n            <Arrow />\n\n            <RenderMethod\n              displayDeprecated={displayDeprecated}\n              displayUncommon={displayUncommon}\n            />\n\n            <Arrow />\n\n            <LifecycleMethod\n              displayDeprecated={displayDeprecated}\n              displayUncommon={displayUncommon}\n              uncommon={true}\n              title=\"getSnapshotBeforeUpdate\"\n            >\n              <code>getSnapshotBeforeUpdate(prevProps, prevState)</code>\n              <p>\n                Here you can get information about and do calculations on the\n                current DOM right before changes are commited\n              </p>\n              <p>\n                <strong>Return:</strong> whatever you return will get passed as\n                an argument to the <code>componentDidUpdate</code> Method\n              </p>\n            </LifecycleMethod>\n\n            <Arrow />\n\n            <div className=\"method centered commit-box\">COMMIT</div>\n\n            <Arrow />\n\n            <LifecycleMethod\n              displayDeprecated={displayDeprecated}\n              displayUncommon={displayUncommon}\n              title=\"componentDidUpdate\"\n            >\n              <code>componentDidUpdate(prevProps, prevState, snapshot)</code>\n              <p>\n                This is the last method to be called on each update, after the\n                DOM changes have been commited.\n              </p>\n              <ul>\n                <li>\n                  You can use whatever you returned from{\" \"}\n                  <code>getSnapshotBeforeUpdate</code> and operate on the\n                  existing DOM.\n                </li>\n                <li>\n                  This is a good place to perform network requests (fetch data)\n                  if they depend on a prop having changed.\n                </li>\n                <li>\n                  You can call <code>setState()</code>, but it must be in a\n                  conditional statement, otherwise it will make an infinite\n                  loop.\n                </li>\n              </ul>\n            </LifecycleMethod>\n          </div>\n        </div>\n\n        {/* UNMOUNTING */}\n\n        <div className=\"cycle\">\n          <div className=\"cycle-box\">\n            <h2>Unmounting</h2>\n            <p>\n              This lifecycle is called when a component is aobut to be removed\n              from the DOM.\n            </p>\n            <LifecycleMethod\n              displayUncommon={displayUncommon}\n              displayDeprecated={displayDeprecated}\n              title=\"componentWillUnmount\"\n            >\n              <code>componentWillUnmount()</code>\n              <p>\n                Use this method to invalidate timers, disable event handlers and\n                clean up subscriptions before the component is removed.\n              </p>\n            </LifecycleMethod>\n          </div>\n        </div>\n\n        {/* ERROR HANDLING */}\n\n        <div className=\"cycle\">\n          <div className=\"cycle-box\">\n            <h2>Error Handling</h2>\n            <div className=\"non-arrow-spacing\">\n              <LifecycleMethod\n                displayUncommon={displayUncommon}\n                displayDeprecated={displayDeprecated}\n                uncommon={true}\n                title=\"componentDidCatch\"\n              >\n                <code>componentDidCatch(error, info)</code>\n                <p>\n                  This method is called when a child throws an error inside a\n                  lifecycle method. The <code>error</code> argument is the error\n                  itself and the <code>info</code> stores information about the\n                  component which threw the error\n                </p>\n                <ul>\n                  <li>\n                    It is not called by he component itself, only children of\n                    the component\n                  </li>\n                  <li>\n                    side effects are allowed. You can use this to log an error\n                    to your own database or error reporting service if you wish\n                  </li>\n                </ul>\n              </LifecycleMethod>\n            </div>\n\n            <div className=\"non-arrow-spacing\">\n              <LifecycleMethod\n                displayUncommon={displayUncommon}\n                displayDeprecated={displayDeprecated}\n                uncommon={true}\n                title=\"getDerivedStateFromError\"\n              >\n                <code>static getDerivedStateFromError(error)</code>\n                <p>\n                  This method is called when a child throws an error and is used\n                  when you need to change the state because of an error.\n                </p>\n                <p>\n                  <strong>Return:</strong> an object representing the new state\n                  - don't use <code>setState()</code>\n                </p>\n              </LifecycleMethod>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\n//Reused components\n\nfunction GetDerivedStateFromProps({\n  alternativeComponent,\n  displayDeprecated,\n  displayUncommon,\n}) {\n  return (\n    <LifecycleMethod\n      displayDeprecated={displayDeprecated}\n      displayUncommon={displayUncommon}\n      title=\"getDerivedStateFromProps\"\n      uncommon={true}\n    >\n      <code>static getDerivedStateFromProps(nextProps, prevState)</code>\n      <p>\n        In this method you can make changes to the state based on props. It\n        appears in the initial render as well as on every update.\n      </p>\n      <p>\n        <strong>Return:</strong> an object which represents the new state, or\n        null to change nothing.\n      </p>\n      <ul>\n        <li>\n          You can't access <code>this</code> (because it's static).\n        </li>\n        <li>\n          In most cases, you won't need to use this method. You can use props\n          directly instead.\n        </li>\n        <li>\n          Must not have side effects (you can do this in the{\" \"}\n          {alternativeComponent} method instead).\n        </li>\n      </ul>\n    </LifecycleMethod>\n  );\n}\n\nconst RenderMethod = ({ displayDeprecated, displayUncommon }) => {\n  return (\n    <LifecycleMethod\n      displayDeprecated={displayDeprecated}\n      displayUncommon={displayUncommon}\n      title=\"render\"\n    >\n      <code>render()</code>\n      <p>\n        This is the main method where you basically do whatever you want the\n        component to do. You should examine the <code>state</code> and{\" \"}\n        <code>props</code> and return what you want to render.\n      </p>\n      <p>\n        <strong>Return:</strong> a react element (JSX), an array, text node\n        (string) or <code>null</code>.\n      </p>\n      <ul>\n        <li>\n          Counterintuitively, render does not commit changes to the DOM yet. You\n          return what you <em>want</em> to render.\n        </li>\n        <li>\n          This is the only method which <strong>MUST</strong> be called (but you\n          can return <code>null</code> if you don't want it to do anything.)\n        </li>\n      </ul>\n    </LifecycleMethod>\n  );\n};\n\nconst unsafePreamble = `This method is now deprecated. You shouldn't use it, but you may\nfind it in old code - probably without the 'UNSAFE_' prefix.`;\n\nReactDOM.render(<App />, document.querySelector(\"#root\"));\n"],"sourceRoot":""}