{"version":3,"sources":["LifecycleMethod.js","arrow.js","Cycle.js","CheckBox.js","data.js","index.js"],"names":["LifecycleMethod","state","displayInfo","displayDeprecated","displayUncommon","clickHandler","e","setState","this","props","title","deprecated","uncommon","content","className","onClick","icon","faCaretDown","faCaretRight","display","methodDescription","React","Component","Arrow","faArrowDown","Cycle","description","methodsList","methods","map","method","id","commit","key","i","length","splice","CheckBox","checked","initialChecked","handleClick","event","target","effect","type","onChange","unsafePreamble","propertyInitializer","constructor","getDSFP","alternativeComponent","componentWillMount","render","componentDidMount","componentWilllReceiveProps","shouldComponentUpdate","componentWillUpdate","getSnapshotBeforeUpdate","componentDidUpdate","componentWillUnmount","componentDidCatch","getDerivedStateFromError","data","App","handleDeprecated","bool","handleUncommon","htmlFor","cycle","filter","item","ReactDOM","document","querySelector"],"mappings":"gRA4DeA,G,kNAtDbC,MAAQ,CACNC,aAAa,EACbC,mBAAmB,EACnBC,iBAAiB,G,EAGnBC,aAAe,SAACC,GACd,EAAKC,UAAS,WACZ,MAAO,CACLL,aAAc,EAAKD,MAAMC,iB,4CAK/B,WAAS,MAEwCM,KAAKC,MAA9CC,EAFC,EAEDA,MAAOC,EAFN,EAEMA,WAAYC,EAFlB,EAEkBA,SAAUC,EAF5B,EAE4BA,QAF5B,EAGmDL,KAAKP,MAAzDC,EAHC,EAGDA,YAAaC,EAHZ,EAGYA,kBAAmBC,EAH/B,EAG+BA,gBAGtC,GAAIO,IAAeR,EACjB,OAAO,KAIT,GAAIS,IAAaR,EACf,OAAO,KAST,OACE,yBAAKU,UAAU,UACb,wBACEA,UAAS,oBAAeH,GAAc,aAA7B,YACPC,GAAY,WADL,aAEJV,GAAe,YACpBa,QAASP,KAAKH,cAEd,yBAAKS,UAAU,QACb,kBAAC,IAAD,CAAiBE,KAAMd,EAAce,IAAcC,OAEpD,IAAMR,GAhBW,SAACS,EAASN,GAChC,GAAIM,EACF,OAAO,yBAAKL,UAAU,sBAAsBD,GAgB3CO,CAAkBlB,EAAaW,Q,GAjDVQ,IAAMC,YCUrBC,MARf,WACE,OACE,yBAAKT,UAAU,SACb,kBAAC,IAAD,CAAiBE,KAAMQ,QC4BdC,EAlCD,SAAC,GAAqC,IAAnCf,EAAkC,EAAlCA,MAAOgB,EAA2B,EAA3BA,YAClBC,EAD6C,EAAdC,QACTC,KAAI,SAACC,GAAY,IACnCpB,EAA6CoB,EAA7CpB,MAAOC,EAAsCmB,EAAtCnB,WAAYC,EAA0BkB,EAA1BlB,SAAUC,EAAgBiB,EAAhBjB,QAASkB,EAAOD,EAAPC,GAC5C,OAAID,EAAOE,OACFF,EAAOjB,QAGd,kBAAC,EAAD,CACEH,MAAOA,EACPC,WAAYA,EACZC,SAAUA,EACVC,QAASA,EACToB,IAAKF,OAKX,GAAc,mBAAVrB,GAAwC,eAAVA,EAChC,IAAK,IAAIwB,EAAIP,EAAYQ,OAAS,EAAGD,EAAI,EAAGA,IAC1CP,EAAYS,OAAOF,EAAG,EAAG,kBAAC,EAAD,CAAOD,IAAKC,EAAI,OAI7C,OACE,yBAAKpB,UAAU,SACb,yBAAKA,UAAU,aACb,4BAAKJ,GACL,2BAAIgB,GACHC,KCHMU,E,4MA1BbpC,MAAQ,CAAEqC,QAAS,EAAK7B,MAAM8B,gB,EAM9BC,YAAc,SAACC,GACb,EAAKlC,SAAS,CAAE+B,QAASG,EAAMC,OAAOJ,UAAW,WAC/C,EAAK7B,MAAMkC,OAAO,EAAK1C,MAAMqC,a,uDANjC,WACE9B,KAAKC,MAAMkC,W,oBASb,WACE,OACE,oCACE,2BACEC,KAAK,WACLb,GAAIvB,KAAKC,MAAMsB,GACfO,QAAS9B,KAAKC,MAAM6B,QACpBO,SAAUrC,KAAKgC,mB,GApBFnB,IAAMC,WCAvBwB,EACJ,6JAOIC,EAAsB,CAC1BhB,GAAI,EACJrB,MAAO,uBACPC,YAAY,EACZC,UAAU,EACVC,QACE,oCACE,kEACA,kJAIA,uLASAmC,EAAc,CAClBjB,GAAI,EACJrB,MAAO,cACPC,YAAY,EACZC,UAAU,EACVC,QACE,oCACE,4CACc,IADd,QACwB,KAExB,0IAIA,4BACE,4BACE,uDAEF,4BACE,mEAGJ,6MAKA,oCACA,4BACE,mIAIA,oDACuB,4CADvB,iCAEW,OAGb,uCACA,6BACE,uKAQFoC,EAAU,SAACC,EAAsBnB,GACrC,MAAO,CACLA,GAAIA,EACJrB,MAAO,2BACPC,YAAY,EACZC,UAAU,EACVC,QACE,oCACE,gEACkC,IADlC,uBAC2D,KAE3D,4JAIA,2BACE,mDADF,yEAIA,4BACE,gDACmB,sCADnB,IACsC,IADtC,sBAC8D,IAD9D,KAGA,qHAIA,0DAC8B,IAD9B,yBACyD,IACtDqC,EAFH,mBAEyC,IAFzC,SAUJC,EAAqB,CACzBpB,GAAI,EACJrB,MAAO,qBACPC,YAAY,EACZC,UAAU,EACVC,QACE,oCACE,0DAAgC,MAChC,2BAAIiC,GACJ,yGAEK,kDAAwB,MAF7B,YAEmD,IAFnD,+GAImB,OAMnBM,EAAS,CACbrB,GAAI,EACJrB,MAAO,SACPC,YAAY,EACZC,UAAU,EACVC,QACE,oCACE,uCAAa,MACb,2IAE0C,uCAF1C,OAEiE,IAC/D,uCAHF,wCAKA,2BACE,mDADF,oBACoD,QADpD,wBAGG,WAHH,OAGkB,sCAHlB,KAKA,4BACE,sHAEkB,oCAFlB,eAIA,6DACgC,wCADhC,kCAEa,sCAFb,6CASFmB,EAAS,CACbA,QAAQ,EACRnB,QACE,yBAAKoB,IAAK,EAAGnB,UAAU,8BAAvB,WAMEuC,EAAoB,CACxBtB,GAAI,EACJrB,MAAO,oBACPC,YAAY,EACZC,UAAU,EACVC,QACE,oCACE,kDAAwB,MACxB,+IAIA,4BACE,gJAE8C,IAF9C,0BAGc,QAOhByC,EAA6B,CACjCvB,GAAI,EACJrB,MAAO,4BACPC,YAAY,EACZC,UAAU,EACVC,QACE,oCACE,6EACA,2BAAIiC,GAEJ,sDAC0B,4DAD1B,oCAQAS,EAAwB,CAC5BxB,GAAI,EACJrB,MAAO,wBACPC,YAAY,EACZC,UAAU,EACVC,QACE,oCACE,4EACA,iJAIA,2BACE,mDADF,gBAC+C,uCAD/C,wCAE8B,sCAF9B,mDAKA,4BACE,sDACA,mJASF2C,EAAsB,CAC1BzB,GAAI,EACJrB,MAAO,sBACPC,YAAY,EACZC,UAAU,EACVC,QACE,oCACE,iFACA,2BAAIiC,GACJ,4BACE,kFACA,gEACmC,mDAAyB,MAAa,IADzE,cASFW,EAA0B,CAC9B1B,GAAI,GACJrB,MAAO,0BACPC,YAAY,EACZC,UAAU,EACVC,QACE,oCACE,wDAC0B,IAD1B,uBACmD,KAEnD,0IAIA,2BACE,mDADF,8DAEqB,oDAFrB,aAQA6C,EAAqB,CACzB3B,GAAI,GACJrB,MAAO,qBACPC,YAAY,EACZC,UAAU,EACVC,QACE,oCACE,mDACqB,IADrB,iCACwD,KAExD,6HAIA,4BACE,qEACyC,IACvC,yDAFF,qCAIA,sIAIA,4CACe,yCAAe,MAD9B,4FASF8C,EAAuB,CAC3B5B,GAAI,GACJrB,MAAO,uBACPC,YAAY,EACZC,UAAU,EACVC,QACE,oCACE,qDAA2B,MAC3B,yJAQA+C,EAAoB,CACxB7B,GAAI,GACJrB,MAAO,oBACPC,YAAY,EACZC,UAAU,EACVC,QACE,oCACE,kDACoB,IADpB,cACoC,KAEpC,gHAEc,uCAFd,wCAEsE,IACpE,sCAHF,iEAMA,4BACE,wGAIA,yJASFgD,EAA2B,CAC/B9B,GAAI,GACJrB,MAAO,2BACPC,YAAY,EACZC,UAAU,EACVC,QACE,oCACE,gEACkC,IADlC,QAC4C,KAE5C,oJAIA,2BACE,mDADF,qDAEY,yCAAe,SA0DlBiD,EAFF,CAhDI,CACf/B,GAAI,EACJrB,MAAO,WACPgB,YACE,qFACFE,QAAS,CACPmB,EACAC,EACAC,EAAQ,oBAAqB,IAC7BE,EACAC,EACApB,EACAqB,IAGa,CACftB,GAAI,EACJrB,MAAO,WACPgB,YACE,iKACFE,QAAS,CACP0B,EACAL,EAAQ,qBAAsB,IAC9BM,EACAC,EACAJ,EACAK,EACAzB,EACA0B,IAIe,CACjB3B,GAAI,EACJrB,MAAO,aACPgB,YACE,+EACFE,QAAS,CAAC+B,IAGU,CACpB5B,GAAI,EACJrB,MAAO,iBACPgB,YACE,uEACFE,QAAS,CAACgC,EAAmBC,KCrazBE,E,4MACJ9D,MAAQ,CACNE,mBAAmB,EACnBC,iBAAiB,G,EAQnB4D,iBAAmB,SAACC,GAClB,EAAK1D,SAAS,CAAEJ,kBAAmB8D,K,EAGrCC,eAAiB,SAACD,GAChB,EAAK1D,SAAS,CAAEH,gBAAiB6D,K,uDAVnC,WACEzD,KAAKwD,iBAAiBxD,KAAKP,MAAME,mBACjCK,KAAK0D,eAAe1D,KAAKP,MAAMG,mB,oBAWjC,WAAU,IAAD,EACsCI,KAAKP,MAA5CE,EADC,EACDA,kBAAmBC,EADlB,EACkBA,gBAEzB,OACE,6BACE,uDAEA,yBAAKU,UAAU,YACb,2BAAOqD,QAAQ,oBAAf,gCACA,kBAAC,EAAD,CACE7B,QAAS9B,KAAKP,MAAMG,gBACpB2B,GAAG,mBACHY,OAAQnC,KAAK0D,kBAIjB,yBAAKpD,UAAU,YACb,2BAAOqD,QAAQ,sBAAf,+BAGA,kBAAC,EAAD,CACE7B,QAAS9B,KAAKP,MAAME,kBACpB4B,GAAG,qBACHY,OAAQnC,KAAKwD,oBAIjB,yBAAKlD,UAAU,mBACZgD,EAAKjC,KAAI,SAACuC,GACT,IAAIxC,EAAUwC,EAAMxC,QAOpB,OANKzB,IACHyB,EAAUA,EAAQyC,QAAO,SAACC,GAAD,OAAWA,EAAK3D,eAEtCP,IACHwB,EAAUA,EAAQyC,QAAO,SAACC,GAAD,OAAWA,EAAK1D,aAGzC,kBAAC,EAAD,CACEF,MAAO0D,EAAM1D,MACbgB,YAAa0C,EAAM1C,YACnBE,QAASA,EACTK,IAAKmC,EAAMrC,c,GA5DTV,IAAMC,WAqExBiD,IAASnB,OAAO,kBAAC,EAAD,MAASoB,SAASC,cAAc,Y","file":"static/js/main.1b6670b9.chunk.js","sourcesContent":["import React from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faCaretRight, faCaretDown } from \"@fortawesome/free-solid-svg-icons\";\nimport \"./index.css\";\n\nclass LifecycleMethod extends React.Component {\n  state = {\n    displayInfo: false,\n    displayDeprecated: true,\n    displayUncommon: true,\n  };\n\n  clickHandler = (e) => {\n    this.setState(() => {\n      return {\n        displayInfo: !this.state.displayInfo,\n      };\n    });\n  };\n\n  render() {\n    // props and state we are using\n    let { title, deprecated, uncommon, content } = this.props;\n    let { displayInfo, displayDeprecated, displayUncommon } = this.state;\n\n    // don't do anything else if displayDeprecated is false\n    if (deprecated && !displayDeprecated) {\n      return null;\n    }\n\n    // don't do anything else if displayUncommon is false\n    if (uncommon && !displayUncommon) {\n      return null;\n    }\n\n    //works out whether or not it should display the component information\n    let methodDescription = (display, content) => {\n      if (display) {\n        return <div className=\"method-description\">{content}</div>;\n      }\n    };\n    return (\n      <div className=\"method\">\n        <h3\n          className={`title-box ${deprecated && \"deprecated\"} ${\n            uncommon && \"uncommon\"\n          } ${!displayInfo && \"onclosed\"}`}\n          onClick={this.clickHandler}\n        >\n          <div className=\"icon\">\n            <FontAwesomeIcon icon={displayInfo ? faCaretDown : faCaretRight} />\n          </div>\n          {\" \" + title}\n        </h3>\n        {methodDescription(displayInfo, content)}\n      </div>\n    );\n  }\n}\n\nexport default LifecycleMethod;\n","import React from \"react\";\nimport \"./index.css\";\n\n// Font Awesome Arrows\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faArrowDown } from \"@fortawesome/free-solid-svg-icons\";\n\nfunction Arrow() {\n  return (\n    <div className=\"arrow\">\n      <FontAwesomeIcon icon={faArrowDown} />\n    </div>\n  );\n}\n\nexport default Arrow;\n","import React from \"react\";\nimport LifecycleMethod from \"./LifecycleMethod.js\";\nimport Arrow from \"./arrow.js\";\n\nconst Cycle = ({ title, description, methods }) => {\n  let methodsList = methods.map((method) => {\n    let { title, deprecated, uncommon, content, id } = method;\n    if (method.commit) {\n      return method.content;\n    }\n    return (\n      <LifecycleMethod\n        title={title}\n        deprecated={deprecated}\n        uncommon={uncommon}\n        content={content}\n        key={id}\n      />\n    );\n  });\n\n  if (title !== \"Error Handling\" && title !== \"Unmounting\") {\n    for (let i = methodsList.length - 1; i > 0; i--) {\n      methodsList.splice(i, 0, <Arrow key={i + 1000} />);\n    }\n  }\n\n  return (\n    <div className=\"cycle\">\n      <div className=\"cycle-box\">\n        <h2>{title}</h2>\n        <p>{description}</p>\n        {methodsList}\n      </div>\n    </div>\n  );\n};\n\nexport default Cycle;\n","import React from \"react\";\n\nclass CheckBox extends React.Component {\n  state = { checked: this.props.initialChecked };\n\n  componentDidMount() {\n    this.props.effect();\n  }\n\n  handleClick = (event) => {\n    this.setState({ checked: event.target.checked }, () => {\n      this.props.effect(this.state.checked);\n    });\n  };\n\n  render() {\n    return (\n      <>\n        <input\n          type=\"checkbox\"\n          id={this.props.id}\n          checked={this.props.checked}\n          onChange={this.handleClick}\n        />\n      </>\n    );\n  }\n}\n\nexport default CheckBox;\n","import React from \"react\";\n\nconst unsafePreamble = (\n  <em>\n    This method is now deprecated. You shouldn't use it, but you may find it in\n    old code - probably without the 'UNSAFE_' prefix.\n  </em>\n);\n\n// ALL Lifecycle Methods\nconst propertyInitializer = {\n  id: 1,\n  title: \"Property Initializer\",\n  deprecated: false,\n  uncommon: false,\n  content: (\n    <>\n      <code>{`state = { name: Garry, age: 28 }`}</code>\n      <p>\n        This is not a method, but here you can initialize your state as a\n        property without needing to call the constructor.\n      </p>\n      <p>\n        Note: This is an experimental javascript feature that comes with Babel\n        and create-react-app. It is not officially adopted yet, but pretty safe\n        to use.\n      </p>\n    </>\n  ),\n};\n\nconst constructor = {\n  id: 2,\n  title: \"constructor\",\n  deprecated: false,\n  uncommon: false,\n  content: (\n    <>\n      <code>\n        constructor{\"(\"}props{\")\"}\n      </code>\n      <p>\n        This is the first method to be called when the component is created. It\n        is generally used for two purposes:\n      </p>\n      <ul>\n        <li>\n          <strong>Initializing state</strong>\n        </li>\n        <li>\n          <strong>Binding event handler methods</strong>\n        </li>\n      </ul>\n      <p>\n        Both are quite commonplace but neither is needed for most purposes. You\n        can use the property initializer for state and you can use arrow\n        functions instead of binding methods.\n      </p>\n      <p>Also:</p>\n      <ul>\n        <li>\n          If you use the property initializer, state will already by set by the\n          time the constructor executes\n        </li>\n        <li>\n          Make sure you assign <code>this.state</code> directly, don't call\n          setstate{\"()\"}\n        </li>\n      </ul>\n      <h4>Syntax:</h4>\n      <pre>\n        <code>\n          {`constructor(props) {\\n  super(props);\\n  this.state = { name: Dave, age: 28 }\\n  this.handleClick = this.handleClick.bind(this)\\n}`}\n        </code>\n      </pre>\n    </>\n  ),\n};\n\nconst getDSFP = (alternativeComponent, id) => {\n  return {\n    id: id,\n    title: \"getDerivedStateFromProps\",\n    deprecated: false,\n    uncommon: true,\n    content: (\n      <>\n        <code>\n          static getDerivedStateFromProps{\"(\"}nextProps, prevState{\")\"}\n        </code>\n        <p>\n          In this method you can make changes to the state based on props. It\n          appears in the initial render as well as on every update.\n        </p>\n        <p>\n          <strong>What to return:</strong> an object which represents the new\n          state, or null to change nothing.\n        </p>\n        <ul>\n          <li>\n            You can't access <code>this</code> {\"(\"}because it's static{\")\"}.\n          </li>\n          <li>\n            In most cases, you won't need to use this method. You can use props\n            directly instead.\n          </li>\n          <li>\n            Must not have side effects {\"(\"}you can do this in the{\" \"}\n            {alternativeComponent} method instead'{\")\"}.\n          </li>\n        </ul>\n      </>\n    ),\n  };\n};\n\nconst componentWillMount = {\n  id: 3,\n  title: \"componentWillMount\",\n  deprecated: true,\n  uncommon: false,\n  content: (\n    <>\n      <code>UNSAFE_componentWillMount{\"()\"}</code>\n      <p>{unsafePreamble}</p>\n      <p>\n        If you need to fetch data or do anything 'before' render, you can do it\n        in <code>componentDidMount{\"()\"}</code> instead {\"(\"}this will cause an\n        extra render, but in these cases you may want to display a 'loading' bar\n        initially anyway{\")\"}\n      </p>\n    </>\n  ),\n};\n\nconst render = {\n  id: 4,\n  title: \"render\",\n  deprecated: false,\n  uncommon: false,\n  content: (\n    <>\n      <code>render{\"()\"}</code>\n      <p>\n        This is the main method where you basically do whatever you want the\n        component to do. You should examine the <code>state</code> and{\" \"}\n        <code>props</code> and return what you want to render.\n      </p>\n      <p>\n        <strong>What to return:</strong> a react element {\"(JSX)\"}, an array,\n        text node\n        {\"(string)\"} or <code>null</code>.\n      </p>\n      <ul>\n        <li>\n          Counterintuitively, render does not commit changes to the DOM yet. You\n          return what you <em>want</em> to render.\n        </li>\n        <li>\n          This is the only method which <strong>MUST</strong> be called (but you\n          can return <code>null</code> if you don't want it to do anything.)\n        </li>\n      </ul>\n    </>\n  ),\n};\n\nconst commit = {\n  commit: true,\n  content: (\n    <div key={5} className=\"method centered commit-box\">\n      COMMIT\n    </div>\n  ),\n};\n\nconst componentDidMount = {\n  id: 6,\n  title: \"componentDidMount\",\n  deprecated: false,\n  uncommon: false,\n  content: (\n    <>\n      <code>componentDidMount{\"()\"}</code>\n      <p>\n        This method is called only once, after the first render. It's a good\n        place to fetch data, or operate on the DOM.\n      </p>\n      <ul>\n        <li>\n          You can call setState immeditely, if you require a DOM node to exist,\n          otherwise set the state in the constructor {\"(\"}or property\n          initialiser{\")\"}\n        </li>\n      </ul>\n    </>\n  ),\n};\n\nconst componentWilllReceiveProps = {\n  id: 7,\n  title: \"componentWillReceiveProps\",\n  deprecated: true,\n  uncommon: false,\n  content: (\n    <>\n      <code>UNSAFE_ComponentWillReceiveProps(nextProps)</code>\n      <p>{unsafePreamble}</p>\n\n      <p>\n        This the old version of <code>getDerivedStateFromProps()</code> and does\n        much the same thing.\n      </p>\n    </>\n  ),\n};\n\nconst shouldComponentUpdate = {\n  id: 8,\n  title: \"shouldComponentUpdate\",\n  deprecated: false,\n  uncommon: true,\n  content: (\n    <>\n      <code>shouldComponentUpdate(nextProps,nextState)</code>\n      <p>\n        This method is used to prevent rendering - if you know the output is not\n        affected by whatever triggered the update\n      </p>\n      <p>\n        <strong>What to return:</strong> a boolean - <code>false</code> to stop\n        the update from continuing, <code>true</code> to run as normal. True is\n        returned by default.\n      </p>\n      <ul>\n        <li>For optimisation only.</li>\n        <li>\n          Consider using a Pure Component instead, which will automatically not\n          update if props and state have not changed\n        </li>\n      </ul>\n    </>\n  ),\n};\n\nconst componentWillUpdate = {\n  id: 9,\n  title: \"componentWillUpdate\",\n  deprecated: true,\n  uncommon: false,\n  content: (\n    <>\n      <code>UNSAFE_ComponentWilUpdate(nextProps, nextState)</code>\n      <p>{unsafePreamble}</p>\n      <ul>\n        <li>This is the old version of getSnapshotBeforeUpdate</li>\n        <li>\n          Any side effects can be moved to <code>componentDidUpdate{\"()\"}</code>{\" \"}\n          instead\n        </li>\n      </ul>\n    </>\n  ),\n};\n\nconst getSnapshotBeforeUpdate = {\n  id: 10,\n  title: \"getSnapshotBeforeUpdate\",\n  deprecated: false,\n  uncommon: true,\n  content: (\n    <>\n      <code>\n        getSnapshotBeforeUpdate{\"(\"}prevProps, prevState{\")\"}\n      </code>\n      <p>\n        Here you can get information about and do calculations on the current\n        DOM right before changes are commited\n      </p>\n      <p>\n        <strong>What to return:</strong> whatever you return will get passed as\n        an argument to the <code>componentDidUpdate</code> method\n      </p>\n    </>\n  ),\n};\n\nconst componentDidUpdate = {\n  id: 11,\n  title: \"componentDidUpdate\",\n  deprecated: false,\n  uncommon: false,\n  content: (\n    <>\n      <code>\n        componentDidUpdate{\"(\"}prevProps, prevState, snapshot{\")\"}\n      </code>\n      <p>\n        This is the last method to be called on each update, after the DOM\n        changes have been commited.\n      </p>\n      <ul>\n        <li>\n          You can use whatever you returned from{\" \"}\n          <code>getSnapshotBeforeUpdate</code> and operate on the existing DOM.\n        </li>\n        <li>\n          This is a good place to perform network requests (fetch data) if they\n          depend on a prop having changed.\n        </li>\n        <li>\n          You can call <code>setState{\"()\"}</code>, but it must be in a\n          conditional statement, otherwise it will make an infinite loop.\n        </li>\n      </ul>\n    </>\n  ),\n};\n\nconst componentWillUnmount = {\n  id: 12,\n  title: \"componentWillUnmount\",\n  deprecated: false,\n  uncommon: false,\n  content: (\n    <>\n      <code>componentWillUnmount{\"()\"}</code>\n      <p>\n        Use this method to invalidate timers, disable event handlers and clean\n        up subscriptions before the component is removed.\n      </p>\n    </>\n  ),\n};\n\nconst componentDidCatch = {\n  id: 13,\n  title: \"componentDidCatch\",\n  deprecated: false,\n  uncommon: true,\n  content: (\n    <>\n      <code>\n        componentDidCatch{\"(\"}error, info{\")\"}\n      </code>\n      <p>\n        This method is called when a child throws an error inside a lifecycle\n        method. The <code>error</code> argument is the error itself and the{\" \"}\n        <code>info</code> stores information about the component which threw the\n        error\n      </p>\n      <ul>\n        <li>\n          It is not called by the component itself, only children of the\n          component\n        </li>\n        <li>\n          Side effects are allowed. You can use this to log an error to your own\n          database or error reporting service if you wish\n        </li>\n      </ul>\n    </>\n  ),\n};\n\nconst getDerivedStateFromError = {\n  id: 14,\n  title: \"getDerivedStateFromError\",\n  deprecated: false,\n  uncommon: true,\n  content: (\n    <>\n      <code>\n        static getDerivedStateFromError{\"(\"}error{\")\"}\n      </code>\n      <p>\n        This method is called when a child throws an error and is used when you\n        need to change the state because of an error.\n      </p>\n      <p>\n        <strong>What to return:</strong> an object representing the new state -\n        don't use <code>setState{\"()\"}</code>\n      </p>\n    </>\n  ),\n};\n\n// All Life Cycles\n\nconst mounting = {\n  id: 1,\n  title: \"Mounting\",\n  description:\n    \"The mounting lifecycle happens once, when the component mounts for the first time.\",\n  methods: [\n    propertyInitializer,\n    constructor,\n    getDSFP(\"componentDidMount\", 15),\n    componentWillMount,\n    render,\n    commit,\n    componentDidMount,\n  ],\n};\nconst updating = {\n  id: 2,\n  title: \"Updating\",\n  description:\n    \"This lifecycle happens every time an update happens to a component. This is usually caused by a change in props, a change in state or by a forceUpdate() call.\",\n  methods: [\n    componentWilllReceiveProps,\n    getDSFP(\"componentDidUpdate\", 16),\n    shouldComponentUpdate,\n    componentWillUpdate,\n    render,\n    getSnapshotBeforeUpdate,\n    commit,\n    componentDidUpdate,\n  ],\n};\n\nconst unmounting = {\n  id: 3,\n  title: \"Unmounting\",\n  description:\n    \"This lifecycle happens when a component is about to be removed from the DOM.\",\n  methods: [componentWillUnmount],\n};\n\nconst errorHandling = {\n  id: 4,\n  title: \"Error Handling\",\n  description:\n    \"This lifecycle happens when an error is thrown in a child component.\",\n  methods: [componentDidCatch, getDerivedStateFromError],\n};\n\nconst data = [mounting, updating, unmounting, errorHandling];\n\nexport default data;\n","import ReactDOM from \"react-dom\";\nimport React from \"react\";\n\n// Components\nimport Cycle from \"./Cycle.js\";\nimport CheckBox from \"./CheckBox.js\";\n\n// data\nimport data from \"./data.js\";\n\n// CSS styling\nimport \"./index.css\";\n\nclass App extends React.Component {\n  state = {\n    displayDeprecated: false,\n    displayUncommon: true,\n  };\n\n  componentDidMount() {\n    this.handleDeprecated(this.state.displayDeprecated);\n    this.handleUncommon(this.state.displayUncommon);\n  }\n\n  handleDeprecated = (bool) => {\n    this.setState({ displayDeprecated: bool });\n  };\n\n  handleUncommon = (bool) => {\n    this.setState({ displayUncommon: bool });\n  };\n\n  render() {\n    let { displayDeprecated, displayUncommon } = this.state;\n\n    return (\n      <div>\n        <h1>React Lifecycle Methods</h1>\n\n        <div className=\"centered\">\n          <label htmlFor=\"include-uncommon\">Include Less Common Methods:</label>\n          <CheckBox\n            checked={this.state.displayUncommon}\n            id=\"include-uncommon\"\n            effect={this.handleUncommon}\n          />\n        </div>\n\n        <div className=\"centered\">\n          <label htmlFor=\"include-deprecated\">\n            Include Deprecated Methods:\n          </label>\n          <CheckBox\n            checked={this.state.displayDeprecated}\n            id=\"include-deprecated\"\n            effect={this.handleDeprecated}\n          />\n        </div>\n\n        <div className=\"cycle-container\">\n          {data.map((cycle) => {\n            let methods = cycle.methods;\n            if (!displayDeprecated) {\n              methods = methods.filter((item) => !item.deprecated);\n            }\n            if (!displayUncommon) {\n              methods = methods.filter((item) => !item.uncommon);\n            }\n            return (\n              <Cycle\n                title={cycle.title}\n                description={cycle.description}\n                methods={methods}\n                key={cycle.id}\n              />\n            );\n          })}\n        </div>\n      </div>\n    );\n  }\n}\nReactDOM.render(<App />, document.querySelector(\"#root\"));\n"],"sourceRoot":""}